
module AuthenticatedSystem

  # This is a modified version of the file generated by the restful_authentication plugin.
  # The main differences are:
  #   - only session and auth cookie are checked to ensure that the user is logged in
  #   - it also requires a valid session token, so users cannot have multiple logins
  # 
  # If you want the original authenticated_system behavior just replace this file with the
  # original one, no other changes are needed as the module interface remains the same,
  # although you may want to clean up the session token methods in the user model.

  protected

    def self.included(base)
      base.send :helper_method, :current_user
    end

    def logged_in?
      !!current_user
    end

    def current_user
      if @current_user != false
        @current_user ||= (login_from_session || login_from_cookie)
      end
    end

    def current_user=(new_user)
      if new_user
        new_user.reset_session_token!
        session[:user_id] = new_user.id
        session[:session_token] = new_user.session_token        
      else
        session[:user_id] = session[:session_token] = nil
      end
      @current_user = new_user || false
    end
    
    def store_location
      session[:return_to] = request.request_uri
    end

    def redirect_back_or_default(default)
      redirect_to session[:return_to] || default
      session[:return_to] = nil
    end

    def login_from_session
      logger.debug ':-) app_authentication.login_from_session'
      if session[:user_id] && session[:session_token]
        user = User.find_by_id session[:user_id]
        if user && user.active? && user.valid_session_token?(session[:session_token])
          return user
        end
      end
      false
    end

    def login_from_cookie
      logger.debug ':-) app_authentication.login_from_cookie'
      unless cookies[:auth_token].blank?
        user = User.find_by_remember_token cookies[:auth_token]
        if user && user.active? && user.remember_token?
          self.current_user = user
          handle_remember_cookie! false # freshen cookie token (keeping date)
          return user
        end
      end
      false
    end

    def logout_keeping_session!
      if @current_user.is_a? User
        @current_user.forget_me
        @current_user.clear_session_token!
      end
      @current_user = false
      kill_remember_cookie!
      session[:user_id] = nil
      session[:session_token] = nil
    end

    def logout_killing_session!
      logout_keeping_session!
      reset_session
    end

    def valid_remember_cookie?
      if @current_user
        @current_user.remember_token? && @current_user.remember_token == cookies[:auth_token]
      end
    end

    def handle_remember_cookie!(new_cookie_flag)
      if @current_user
        case
          when valid_remember_cookie?
            @current_user.refresh_token # keeping same expiry date
          when new_cookie_flag
            @current_user.remember_me_until 1.month.from_now
          else
            @current_user.forget_me
        end
        send_remember_cookie! if @current_user.remember_token
      end
    end

    def kill_remember_cookie!
      cookies.delete :auth_token
    end

    def send_remember_cookie!
      cookies[:auth_token] = {:value => @current_user.remember_token,
                              :expires => @current_user.remember_token_expires_at}
    end
end





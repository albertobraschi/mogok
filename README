
This project aims to provide the basic functionalities required by a private bittorrent
tracker and community. It is built with the Ruby language and the Ruby on Rails framework.

- Live Demo: http://mogok.morphexchange.com (thanks to Morph Labs: http://mor.ph)

- Demo Video: http://www.youtube.com/watch?v=ep_dUaTb1GU (watch in HD)

- Screenshots
  - http://bayimg.com/image/oaamaaacg.jpg
  - http://bayimg.com/image/oaamcaacg.jpg
  - http://bayimg.com/image/oaamhaacg.jpg

- Current State: Beta Testing

- Licence: see doc/MIT_LICENCE

- History/Changelog: see doc/HISTORY

- Contact: mogoktracker[at]gmail


ABOUT SOME OF THE FEATURES

- Torrent categorization
  Torrents are categorized by Type, Category, Format and Tags. Such structure allows to
organize the torrents in specific or generic forms. Let's see examples on both
scenarios (note that users can't choose or even see the torrent type, this is done implicitly
when a category is selected).

  # A community specialized in music:
    - this structure is configured as the example in the create_data migration file

    type[audio]
      formats[MP3, OGG, FLAC]
      category[Rock]
        tags[acid, rockabilly, indie]
      category[Blues]
        tags[east-coast, british, st-louis]
      category[Jazz]
        tags[swing, cool, electric]

    type[video]
      formats[AVI, OGG, MPG]
      category[Master Class]
        tags[popular, classical, theory]
      category[Music Video]
        tags[rock, pop, arthouse]

    type[ebook]
      formats[PDF, DOC, LIT]
      category[Score]
        tags[guitar, violin, big-band]
      category[Theory]
        tags[popular, classical]

    type[software]
      formats[EXE, ZIP, RAR]
      category[Software]
        tags[windows, linux, mac]

  # A community with more generic content:

    type[music]
      formats[MP3, OGG, FLAC]
      category[Music]
        tags[rock, blues, jazz]

    type[movie]
      formats[AVI, OGG, MPG]
      category[Movie]
        tags[podcast, documentary]

    type[ebook]
      formats[PDF, PPS, DOC]
      category[eBook]
        tags[literature, manual, self-improvement]

- User Roles
  Users are classified by roles, which define their rights to perform certain operations. The
colors of the links in the interface indicate the minimum role that has access to it.
  There are a set of reserved roles required by the application (check create_default_data
migration file): system, owner, admin, mod, user and defective. The system role is supposed to
be used by just one user (must have id = 1) and is used to identify automatic messages (system
user won't accept messages). Users with roles system, owner and admin can edit the profiles of
users with lower ranking.
  Roles and users also have tickets that grant them rights, those currently in use are:
  - inviter: grants the right to send invitations
  - staff: grants right to see and edit staff info
  - perpetual: will not be inactivated or removed if absent from the site
  - wisher: allow user to request torrents

- Ratio policy
  The application will apply ratio enforcement rules and promote users based on their ratio and
upload credit, check the background tasks item below for more on that. Cheat detection scripts
are not implemented though.

- Bonus
  You can specify bonus rules for users who upload data in certain conditions. Currently the
application will give a 50% bonus for the data uploaded when seeding a torrent, check app_config.yml
and lib/bittorrent/tracker.rb.

- Mail
  The application can send emails for events like password recovery and invitation. It comes
with a test configuration that uses a regular Gmail account (just add a valid username and password
to config/initializers/action_mailer.rb). The plugin to access Gmail is action_mailer_optional_tls,
it is in vendor/plugins. As configured in action_mailer.rb, mailer won't throw errors in development
mode.

- Logs
  Several types of logs are provided so you can check what is going on with the app:
  - error logs
  - tracker announce logs (can be turned off)
  - activity logs
  - background tasks logs

- Error logs
  The application will alert you when an exception is thrown by the application, you can
see what happened in the error logs page. In production mode only unexpected errors will
be logged.

- Application params
  Some configuration parameters are stored in the database so they can be changed without
restarting the application, although they have to be queried every time they are used. Values
can be anything loadable by YAML.

- Login Block
  After a limited number of login attempts (currently 5) the used IP will remain blocked by a
period of time (currently 4 hours), but if the user changes its password using a password recovery
email the block is cancelled.

- Signup
  After a successful signup the used IP will be blocked for a period of time (currently 1 day). This
is a simple measure to prevent automated signups and a more sophisticated mechanism should be
implemented if necessary. Currently the application won't send an activation email to a new user.

- Announce URLs
  - are used by the bittorrent clients to send requests to the tracker
  - they contain a special value called announce passkey, that identifies the user who is sending the
    request (e.g. http://localhost/tracker/USER_ANNOUNCE_PASSKEY/announce)
  - when a user downloads a torrent file, this special url is included in it. this means that if a
    torrent is stolen, the thief will be able to download using the user's credits. to minimize the
    damage the application generates the announce passkeys combining the user personal passkey and the
    torrent announce key (using OpenSSL::HMAC), so if a user has one torrent stolen it will compromise
    only that particular torrent
  - users have to be oriented to reset their passkeys if they notice any suspicious activity in their
    accounts, like peers with strange IPs or unusual ratio variation

- Torrent Upload
  - the application will accept any torrent, even if the announce url is from another tracker or
    empty (it will be replaced by the user's personal announce url)
  - if the torrent is not set to private the application's torrent parser will add a private flag
    to it (such flag indicates that the torrent belongs to a private tracker, so the bittorrent clients will
    block DHT and only peers registered in the tracker will be allowed to join that torrent).

- Requests
  This feature allows users to request torrents that are not uploaded yet. After a request is created
  users can add bounties to it as a way to reward who fills that request. After a request is filled it will
  stay in pending status until a moderator approves or rejects the filling. Only after the approval the
  bounty will be granted to the filler. Note that internally 'requests' are called 'wishes' to prevent
  naming conflicts with Rails' requests.

- Rewards
  Users can reward torrent uploaders by adding rewards to torrents. This will transfer upload credit from
  the rewarder to the torrent uploader.

- Reseed Request
  Users can ask for other users to reseed a dead torrent, that will cost the requester upload credit (define
the amount in the file app_config.yml). Once the request is made, the user who created the torrent and
some (also configurable) of those who snatched it will receive a message.

- Background Tasks
  These are tasks that run periodically to keep the site tidy. They clean stale data, update things, etc.
  - feature components:
    + BgTasks module: a dispatcher to invoke tasks and utility methods to load the tasks (lib/bg_tasks/)
    + BgTask model: contain all the business logic of the tasks (app/models/ and app/models/bg_task/)
    + BgTaskParam model: holds the task params in yaml format
    + configuration file: define the tasks and their behavior (config/bg_tasks.yml)
  - to add a new task create an entry in bg_tasks.yml, add a new bg_tasks concern file (just follow the
    pattern in files bg_task.rb and in the concern files in app/models/bg_task/) and reload the tasks
  - tasks also can be executed individually in the tasks page (that won't alter the schedule)
  - there is a log page where the tasks report their execution status
  - if next_exec_at is empty the task won't be executed, just scheduled
  - if interval is empty the task will be ignored
  - Implemented tasks (see app/models/bg_tasks/)
    + cleanup
      delete or inactivate records in various tables.
    + cleanup_peers
      delete inactive peers based in a inactivity limit period.
    + refresh_stats
      gather stats about users, torrents, peers and so on.
    + promote_demote
      assign roles to users based on their ratio and uploaded data amount.
    + ratio_watch
      require users to maintain a minimum ratio based on how much data they've downloaded. when
      users violate the ratio requirements their roles are set to 'defective' and a date is defined as a
      limit for them to improve their ratio. after this date the system will check if the defectives'
      ratio is ok and set their roles back to 'user' or invalidate/remove them.
  - tasks are supposed to run as a cron job, but there is a mock for testing
    + running the mock
      - also works in Windows
      - will run in 'development' mode by default
      - run with the commands:
        mogok$ ruby1.8 script/bg_tasks_mock.rb
        mogok$ ruby1.8 script/bg_tasks_mock.rb production
    + running as a cron job
      - the app has a link to include cron jobs in your system automatically using the 'whenever' gem
      - to include the cron jobs, configure the scheduling in the file 'config/schedule.rb' (it is already
        configured to run every hour) and click 'update (cron)' in the bg_tasks page, you should see the new
        cron jobs in the cron jobs table (note that if the app is deployed in more than one machine you'll
        have set the cron tabs manually in the specific one).
      - IMPORTANT: the file APP_ROOT/script/runner must be an executable (check it if you're not deploying with Capistrano)
      - to edit cron jobs directly in your system use the commands below:
        - using the 'whenever' gem:
          mogok$ whenever --update-crontab Mogok (same command called by the application as mentioned above)
        - using the crontab tool:
          $ crontab -l (list cron jobs)
          $ crontab -e (edit cron jobs)
          $ crontab -r (remove all)
          - cron job example using the 'bg_tasks.rb' script (runs every hour at minute 5):
            5 * * * * RAILS_ENV=production /home/user/apps/mogok/script/runner /home/user/apps/mogok/script/bg_tasks.rb


# SOME TECHNICAL THINGS

- Rails version
  2.3.2

- Database
  The application requires MySQL as it uses database specific column types and features.

- Search engine
  It uses the MySQL's fulltext indexation, see migration files for torrent_fulltexts and
topic_fulltexts. The information was duplicated in these tables because fulltext indexes require
the table to be of type MyISAM.

- Debugging
  To make the application flow more understandable, the code is filled with debugging logs that
are printed by the Rails framework (won't be printed in 'production' mode). For a friendlier view,
the logs start with smilies:
  :-) - everything is ok
  :-o - something out of ordinary happened, but most likely it is the user's fault
  :-( - an unexpected error occurred

- Authentication
  It uses the restful_authentication plugin, but with some changes, check lib/authenticated_system.rb.
The modifications don't affect the AuthenticatedSystem module interface or the plugin code, so if
you want the original behavior just replace the authenticated_system file by the one originally
generated by the plugin, no other changes in the application code are required.
  IMPORTANT: don't forget to change the restful_authentication site key (see below)

- Pagination
  The application extends the functionalities of the will_paginate plugin. Check
vendor/plugin/mogok_will_paginate/README for more about it. Note that the will_paginate plugin
is also in the plugin directory to prevent the extension from become broken.

- Share Nothing
  This application follows the share nothing principle, which means that all the application data
is stored in the database, including the torrent files data (caching is used to minimize database
operations, see below).

- Sessions
  Currently is cookie based (the Rails default).

- Testing
  Two strategies are used to test the application functionalities: Cucumber features for integration
tests and RSpec for unit testing. The implemented tests main focus are the in the features used by
the regular users, which means that admistrative features are not extensively covered. To run the
tests you must create the 'test' database instance (check appendix B).
  IMPORTANT: caching is disabled by default during tests as the tests frameworks bypass cache_money
synchronization, you can enable it by changing the flag in environment.rb.
  + Cucumber Features
    Are in the directory 'features'. Note that those tests rely on messages in the 'en.yml' file
    and on the content of the default english views, so changing them may break some of the tests.
    IMPORTANT: tests involving torrent files may be problematic on Windows (files may get corrupted).
    - running
      mogok$ rake features (run all)
      mogok$ cucumber features/signup.feature (run only the signup feature)
      mogok$ cucumber features --name "Some scenario" (run only scenarios matching the given name)
  + RSpec Tests
    Are in the directory 'spec' and focus on the business logic implemented in the models
    - running
      mogok$ rake spec (run all)
      mogok$ spec spec/models/forum_spec.rb spec (run only spec tests for model 'forum')

- Caching
  The application uses memcached as the cache store. Caching is disabled by default in development
and test modes, but you can enable it changing the flags in the file config/environment.rb in order
to ensure that the cache is interacting well with the application or to get a better logging of
the cache activities when on development mode.
  - currently the application uses three caching strategies:
    + cache_money (http://github.com/nkallen/cache-money/tree/master)
      - very easy to use, it caches records every time a query for a specific record, like User.find(1)
        or user.role, is made
      - the way it is being used, list queries, like User.find(:all) or user.messages won't be cached
      - note that cache_money is very recent and there are some reports of problems when using it with Passenger
      - to quit using it just remove the 'index' calls from the models (search for 'cache_money') and
        delete its initialization code in the file 'config/initializers/caching.rb'
    + custom cache
      - caches lists of records that are frequently used, mainly domain values like categories and formats
      - the implementation is inside some of the models and use the methods in 'lib/caching_methods.rb'
      - are reset by sweepers (app/sweepers)
    + fragment caching
      - used to cache portions of pages, currently the torrent browse page (the most performance critical
        page in the application) and the application menu.
      - the torrent browse page will be cached only when browsed with the default options, which means no
        search parameters and ordered by 'created_at DESC'. if a user searches for something or order
        the table by another column the application will retrieve the information from the database and
        won't cache it. also won't be cached for admins and mods as they can see things that users can't.
      - the torrent page cache will be reset (expired) if a torrent is uploaded/removed/inactivated or
        by expiration of the period configured in the app_config file (expiration time should not be too
        long because informations like seeders/leechers are updated all the time)
      - the fragment expiration time is made possible by the mogok_timed_fragment_cache plugin which is
        a rewriting of the timed_fragment_cache plugin

- Tracker request
  A tracker request is treated just like any regular Rails request. Under very heavy load this could be
a problem, so a faster mechanism (like Rails Metal or even an external tracker) might be required on such
scenario.

- Bittorrent
  The implementation is based in the specification found at: http://wiki.theory.org/BitTorrentSpecification
  The module Bittorrent is in: lib/bittorrent/

- Internationalization
  Although the application does not support multiple languages, it is structured in a way that makes it easy
to translate. So, if you want to translate, let's say to Spanish, this is what you have to do:
  - create a file named 'es.yml' in config/locales using the existing 'config/locales/en.yml' as the base for
    your translation. this file will contain localized formats for date, time and numbers and translations for
    the messages generated by controllers, models and some modules in the lib directory.
  - change the default locale in the file app_config.yml to 'es'
  - translate the views. note that you can let the original english views intact and just add the translated
    ones following this name pattern: my_view.html.erb -> my_view.es.html.erb.
  - IMPORTANT: changing or deleting the default 'en.yml' file and the default english views will break some of
    the features tests.

- Configuration
  Lays in the files below. The files come with an 'example' extension, just create a copy of each file without
the extension and change the configuration when needed.
  - app config
    + config/environment.rb
    + config/app_config.yml
    + config/bg_tasks.yml
    + config/database.yml
    + config/memcached.yml
    + config/schedule.rb
    + config/initializers/action_mailer.rb
    + config/initializers/session_store.rb (change the secret!)
    + config/initializers/site_keys.rb (holds the restful_authentication key, change it!)
    + db/migrate/099_create_data.rb (configure the app initial data, like roles, categories and so on)
  - install and deploy
    + setup/install.rb
    + setup/deploy.rb


# DEPLOYMENT
  If you are new to Rails and use Windows, a good and easy way to put the application
running is to use InstantRails (install the correct version of the rails gem). For a real
scenario, a good option is to deploy on Ubuntu using Passenger (modrails). 
  A good way to have a real world remote server scenario is to emulate a production setup using
VirtualBox, which is a free OS emulator by Sun Microsystems (check Appendix B on how to configure it).
  IMPORTANT: if you are running on Windows, change the name of the file 'lib/mysql.rb.windows' to
'lib/mysql.rb' if the application can't find your mysql gem.

- Deploying on Ubuntu with Passenger (tested for Ubuntu 8.04 and Passenger 2.2.2):  

  # Installing the server software
    There are two ways for installing all the software in the server: manually or using the 'passenger-stack'
    script (http://github.com/benschwarz/passenger-stack/tree/master), which uses the 'sprinkle' gem.
    If you prefer to do it by hand or is deploying on Windows, check appendix A for a complete list of the
    required installation steps.
    To install using the 'passenger-stack' script, follow the steps below.
      - you must have the 'capistrano' and 'sprinkle' gems installed in your local machine:
        $ gem install capistrano
        $ gem install crafterm-sprinkle --source http://gems.github.com/
      - in the file 'setup/sprinkle_installer.rb', specify the server user (must have sudo privileges, so
        use the first user you created when installing Ubuntu or another user with same privileges)
      - in your local machine, run the command below (will install a bunch of things, so be patient):
        $ sprinkle -v -c -s setup/sprinkle_installer.rb
        IMPORTANT: when completed, set the root password for Mysql as it is not defined when installed

  # Deploying the application
    You can deploy manually just by copying all the code to the server and running the migrations or using
    the Capistrano recipe located at 'setup/deploy.rb'. To use the capistrano recipe follow the steps below.
    > First deployment
      The first deployment requires the following steps:
      - In the server
        - app user (for security reasons, create another user for the app)
          - create
            $ sudo adduser mogok
          - add user to www-data group
            $ sudo adduser mogok www-data

        - app directory (where the app will be deployed)
          - create
            $ sudo mkdir /var/vhosts
            $ sudo mkdir /var/vhosts/mogok
          - change ownership
            $ sudo chown mogok:www-data -R /var/vhosts/mogok
          - change permissions
            $ sudo chmod 775 -R /var/vhosts/mogok

        - database
          - log in on mysql
            $ mysql -u root -p (logging in as root user)
          - create
            mysql> create database mogok_production;
          - set permissions to app user
            mysql> GRANT ALL PRIVILEGES ON mogok_production.* TO 'mogok'@localhost IDENTIFIED BY 'enter password here';

        - passenger
          - edit the httpd.conf file (sudo gedit /etc/apache2/httpd.conf), including the following:
            <VirtualHost *:80>
              ServerName localhost
              DocumentRoot "/var/vhosts/mogok/current/public"
            </VirtualHost>
          - restart apache
            see Appendix D
          - note that there are several ways to tell Apache about your app, this one happens to be the simpliest

        - memcached
          - start (it MUST be started before the deployment or the migrations will fail)
            see Appendix C (will start automatically after server restarts)

      - In your local machine
        - be sure that all the configuration files are prepared (see item Configuration above)
        - edit file 'config/database.yml'
          set the user and password that you created for the production database
        - edit file 'config/deploy.yml'
          set user with the app user that you created in the server (password will be asked when you deploy)
        - setup server (create the deploy dirs in the server and upload all the config files and the create_data migration)
          $ cap deploy:setup
        - deploy application (upload the application code and run the database migrations)
          $ cap deploy:cold
        - the application should be running, use owner/owner or system/system to log in

    > Redeploying (tasks to submit code and config changes to the server, run the commands from the app root in your local machine)
      - code (add a new version of your code to the server)        
        $ cap deploy
      - rollback (rollback deploy to the previous version, but do not touch the config files)
        $ cap deploy:rollback
      - config files (replace the config files in the server with your local ones, see 'config/deploy.rb' for the complete list)
        $ cap deploy:config
      - site keys (replace 'config/initializers/site_keys.rb' in the server (all passwords will get stale if changed!!!))
        $ cap deploy:config:replace_site_keys
      - session store (replace 'config/initializers/session_store.rb' in the server (all current sessions will get stale if changed!!!))
        $ cap deploy:config:replace_session_store
      - check 'config/deploy.rb' for other tasks involving config files
      IMPORTANT:
        + the deploy is currently being made via copy, which means that the code is transferred from your local
          machine to the server, not from Github to the server
        + the deploy script will effectively use your local git repository, so any change MUST be commited or it
          won't be deployed (install git in your machine to be able to do this)
        + the config files (those that came with an 'example' extension) are uploaded directly from your local
          machine to the server and don't need to be commited (in fact they are set to be ignored in .gitignore)


# Appendix A: Server Installation Steps

  - ubuntu update
    sudo apt-get install update
    sudo apt-get install dist-upgrade

  - build-essential
    sudo apt-get install build-essential

  - apache
    sudo apt-get install apache2
    sudo apt-get install apache2-prefork-dev

  - mysql server
    sudo apt-get install mysql-server
    sudo apt-get install libmysqlclient15-dev
    sudo apt-get install libdbd-mysql-ruby

  - memcached (there is also a Windows version, just look for it)
    sudo apt-get install memcached

  - rails 2.3.2 with ruby 1.8

    > ruby (consider also the Ruby Enterprise Edition option)
      sudo apt-get install ruby1.8 ruby1.8-dev rdoc1.8 ri1.8 irb libopenssl-ruby

    > install RubyGems (version 1.3.1+ required)
      - look on the net about how to install it properly, it changes all the time
      - add github gems repository
        sudo gem1.8 sources -a http://gems.github.com
      - update RubyGems if necessary
        sudo gem1.8 update --system

    > rails
      sudo gem1.8 install rails

    > mysql gem
      sudo gem1.8 install mysql

    > gems required to run the cucumber and rspec tests
      sudo gem1.8 install ruby-debug
      sudo gem1.8 install rspec
      sudo gem1.8 install rspec-rails
      sudo gem1.8 install cucumber
      sudo apt-get install libxml2 libxml2-dev libxslt1.1 libxslt1-dev libxml-ruby libxslt-ruby
      sudo gem1.8 install webrat
      sudo gem1.8 install notahat-machinist

    > gems required for caching
      sudo gem1.8 install memcache-client
      sudo gem1.8 install nkallen-cache-money
      sudo gem1.8 install SystemTimer

    > gems required for automatic crontab update (ignore if you are setting it manually)
      sudo gem1.8 install javan-whenever

    > mongrel (optional) - useful to run in development mode, run using 'ruby script/server' or 'script/server'
      sudo gem1.8 install mongrel

    > thin (optional) - alternative to mongrel, run using 'ruby script/server thin' or 'script/server thin')
      sudo gem1.8 install thin

    > passenger
      sudo gem1.8 install passenger
      sudo /usr/bin/passenger-install-apache2-module

      - passenger will ask you to edit your apache config file
        sudo gedit /etc/apache2/httpd.conf

        - the file should have something like:

          LoadModule passenger_module /usr/lib/ruby/gems/1.8/gems/passenger-2.2.2/ext/apache2/mod_passenger.so
          PassengerRoot /usr/lib/ruby/gems/1.8/gems/passenger-2.2.2
          PassengerRuby /usr/bin/ruby1.8

          RailsEnv production (you can use this parameter to change the environment, default is production)

          <VirtualHost *:80>
            ServerName localhost
            DocumentRoot /var/vhosts/mogok/current/public (or your app path if using other)
          </VirtualHost>

    > start memcached (if necessary)
      see Appendix C
      
    > restart apache
      see Appendix D

# Appendix B: VirtualBox Setup
  > in order to access the application in the VirtualBox from your system or extenally, a port forward is needed:
    - set the app to run on port 8080 on VirtualBox (change Apache config files)
    - execute the commands below (VBoxManage is in the VirtualBox's install dir):
      VBoxManage setextradata "ubuntu_box_name" "VBoxInternal/Devices/pcnet/0/LUN#0/Config/apache/Protocol" TCP
      VBoxManage setextradata "ubuntu_box_name" "VBoxInternal/Devices/pcnet/0/LUN#0/Config/apache/GuestPort" 8080
      VBoxManage setextradata "ubuntu_box_name" "VBoxInternal/Devices/pcnet/0/LUN#0/Config/apache/HostPort" 80
    - restart Apache and your system if needed
    - now you can open http://localhost on your system and it will be forwarded to port 8080 on VirtualBox

# Appendix C: Controlling Memcached
  - options
    -d = run as a daemon
    -l = ip address
    -p = port
    -m = Mb of memory for the cache
    -P = where to put the pid file
    -vv = verbose
  - start as daemon
    memcached -d -l 127.0.0.1 -p 11211 -m 256 -P /tmp/memcached.pid
  - start in verbose mode (so you can see what is being stored and read from it)
    memcached -vv -l 127.0.0.1 -p 11211 -m 256 -P /tmp/memcached.pid

# Appendix D: Useful Commands
  - passenger
    - manual restart
      $ touch tmp/restart.txt
    - info
      $ passenger-memory-stats
      $ passenger-status
  - apache
    $ sudo /etc/init.d/apache2 stop
    $ sudo /etc/init.d/apache2 start
    $ sudo /etc/init.d/apache2 restart









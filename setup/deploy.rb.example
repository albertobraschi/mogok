
# Capistrano recipe for deployment, in this case the user do not
# need to act as sudo as it is supposed to only deploy and not install
# anything in the system.
#
# It is also possible to deploy from a remote git repository to the server:
#   + switch the comments in the 'repository' and 'deploy strategy' sections
#   + change the clone repository url if using a different one
#   + install git in the server (enable it in 'setup/passenger_stack.rb')

set :application, 'mogok'

# server
  set :domain, 'localhost'
  # set :port, 2222

# user
  Capistrano::CLI.ui.say('Please provide the app user password:')
  set :user, application
  Capistrano::CLI.ui.say(" > username: #{user}")
  set :password, Capistrano::CLI.password_prompt(' > password: ')
  set :use_sudo, false

# roles
  role :app, domain
  role :web, domain
  role :db,  domain, :primary => true

# scm
  set :scm, :git
  default_run_options[:pty] = true

# repository
  set :branch, 'master'
  # remote
    # set :repository, 'git://github.com/pepeb/mogok.git'
  # local
    set :repository, '.'

# cleanup (cap deploy:cleanup)
  set :keep_releases, 4

# deploy strategy
  # remote repository
    # set :deploy_via, :remote_cache
    # set :repository_cache, 'git_cache'
  # local repository
    set :deploy_via, :copy
    excluded =  ['.git/*', '.gitignore', 'log/*', 'nbproject/*', 'setup/*', 'Capfile']
    excluded += ['config/app_config.*', 'config/bg_tasks.*', 'config/database.*', 'config/environment.*', 'config/memcached.*', 'config/schedule.*']
    excluded += ['config/initializers/action_mailer.*', 'config/initializers/session_store.*', 'config/initializers/site_keys.*']
    excluded += ['db/migrate/099_create_app_data.*']
    set :copy_exclude, excluded

# deploy
  set :deploy_to, "/var/vhosts/#{application}"

  set :local_config_path, 'config'                        # config files path in the local machine
  set :shared_config_path, "#{shared_path}/system/config" # config files path in the server's shared dir
  set :release_config_path, "#{release_path}/config"      # config files path in the server's release dir

  namespace :deploy do
    task :after_update_code do
      config.symlinks # create the symlinks for the config files in the release config dir
      update_crontab
    end

    task :after_setup do
      config.init_config
    end

    task :start, :roles => :app do
      restart
    end

    task :stop, :roles => :app do
      # do nothing
    end

    desc 'Restart passenger.'
    task :restart, :roles => :app, :except => { :no_release => true } do
      run "touch #{current_path}/tmp/restart.txt"
    end

    desc 'Update the crontab file using whenever gem.'
    task :update_crontab, :roles => :db do
      run "cd #{release_path} && whenever --update-crontab #{application}"
    end

    # Tasks that upload and replace the application's config files so they can remain
    # stored in the shared/system directory through deployments.
    namespace :config do
      set :config_files, ['app_config.yml', 'bg_tasks.yml', 'database.yml', 'memcached.yml', 'environment.rb', 'schedule.rb', 'initializers/action_mailer.rb']
      set :session_store_file, 'initializers/session_store.rb'
      set :site_keys_file, 'initializers/site_keys.rb'
      set :app_data_migration_file, 'db/migrate/099_create_app_data.rb'

      desc 'Create the shared config dirs in the server and upload ALL config files.'
      task :init_config, :roles => :app do
        set_directories
        set_files
        set_site_keys
        set_session_store
        set_custom_migrations
      end

      desc 'Create config dirs if necessary, upload config files (replace if they exist) and restart server.'
      task :default, :roles => :app do
        set_directories
        set_files
        restart
      end

      desc 'Create the shared config dirs in the server if they do not exist.'
      task :set_directories, :roles => :app do
        run "mkdir -p #{shared_config_path}/initializers"
      end

      # usage: cap deploy:config:set_file file=app_config.yml
      desc 'Upload a particular config file, replacing if it exists, and restart the application.'
      task :set_file, :roles => :app do
        f = ENV['file']
        raise 'the given file does not appear to be a config file' unless config_files.include?(f)
        run "rm -f #{shared_config_path}/#{f}"
        top.upload "#{local_config_path}/#{f}", "#{shared_config_path}/#{f}"
        restart
      end

      desc 'Upload config files, replacing if they exist.'
      task :set_files, :roles => :app do
        config_files.each do |f|
          run "rm -f #{shared_config_path}/#{f}"
          top.upload "#{local_config_path}/#{f}", "#{shared_config_path}/#{f}"
        end
      end

      desc 'Upload custom migrations to the server, creating the required dirs.'
      task :set_custom_migrations, :roles => :app do
        run "mkdir -p #{shared_path}/db/migrate"
        top.upload "#{app_data_migration_file}", "#{shared_path}/#{app_data_migration_file}"
      end

      desc 'Upload session store config file to server.'
      task :set_session_store, :roles => :app do
        top.upload "#{local_config_path}/#{session_store_file}", "#{shared_config_path}/#{session_store_file}"
      end

      desc 'Replace session store config in server and restart. All current user sessions will become stale if changed!!!'
      task :replace_session_store, :roles => :app do
        if Capistrano::CLI.ui.agree('WARNING: Changing the session store attributes will invalidate all current user sessions. Are you sure? (y/n):')
          run "rm -f #{shared_config_path}/#{session_store_file}"
          set_session_store
          restart
        end
      end

      desc 'Upload restful authentication site keys config file to server.'
      task :set_site_keys, :roles => :app do
        top.upload "#{local_config_path}/#{site_keys_file}", "#{shared_config_path}/#{site_keys_file}"
      end

      desc 'Replace restful authentication site keys in server and restart. All existing passwords will become stale if changed!!!'
      task :replace_site_keys, :roles => :app do
        if Capistrano::CLI.ui.agree('WARNING: Changing the site keys will invalidate all existing passwords. Are you sure? (y/n):')
          run "rm -f #{shared_config_path}/#{site_keys_file}"
          set_site_keys
          restart
        end
      end

      desc 'Set config files symlinks for the application release that was deployed.'
      task :symlinks, :roles => :app do
        # config files
        config_files.each {|f| run "ln -s #{shared_config_path}/#{f} #{release_config_path}/#{f}" }
        # session_store.rb
        run "ln -s #{shared_config_path}/#{session_store_file} #{release_config_path}/#{session_store_file}"
        # site_keys.rb
        run "ln -s #{shared_config_path}/#{site_keys_file} #{release_config_path}/#{site_keys_file}"
        # app_data migration
        run "ln -s #{shared_path}/#{app_data_migration_file} #{release_path}/#{app_data_migration_file}"
      end
    end
  end







